plugins {
    id 'java'
    id 'application'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.6.21' apply false
    id 'org.jmailen.kotlinter' version "3.10.0" apply false
    id "com.github.ben-manes.versions" version '0.42.0' apply false
    id 'com.github.johnrengelman.shadow' version '7.1.2' apply false
}

ext {
    libraries = [
            coroutines_core: "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version",

            css            : "org.jetbrains.kotlin-wrappers:kotlin-css:$css_version",

            ktor_core      : "io.ktor:ktor-server:$ktor_version",
            ktor_cio       : "io.ktor:ktor-server-cio:$ktor_version",
            ktor_sessions  : "io.ktor:ktor-server-sessions:$ktor_version",

            html_builder   : "io.ktor:ktor-server-html-builder:$ktor_version",

            core_utils     : "com.github.pambrose.common-utils:core-utils:$utils_version",
            server_utils   : "com.github.pambrose.common-utils:ktor-server-utils:$utils_version",

            commons_text   : 'org.apache.commons:commons-text:$text_version',

            logging        : "io.github.microutils:kotlin-logging:$logging_version",
            logback        : "ch.qos.logback:logback-classic:$logback_version"
    ]
}

allprojects {
    description = 'kslides'
    group 'com.github.kslides'
    version '0.8.1'

    apply plugin: 'application'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'org.jmailen.kotlinter'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'com.github.ben-manes.versions'

    repositories {
        google()
        mavenCentral()
        maven { url = 'https://jitpack.io' }
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
            }
        }
    }
}

subprojects {
    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"

        implementation "org.jetbrains.kotlin-wrappers:kotlin-css:$css_version"

        implementation "io.ktor:ktor-server:$ktor_version"
        implementation "io.ktor:ktor-server-cio:$ktor_version"
        implementation "io.ktor:ktor-server-sessions:$ktor_version"
        implementation "io.ktor:ktor-server-html-builder:$ktor_version"
        implementation "io.ktor:ktor-server-call-logging:$ktor_version"
        implementation "io.ktor:ktor-server-compression:$ktor_version"

        implementation "com.github.pambrose.common-utils:core-utils:$utils_version"
        implementation "com.github.pambrose.common-utils:ktor-server-utils:$utils_version"

        implementation 'org.apache.commons:commons-text:1.9'

        implementation "io.github.microutils:kotlin-logging:$logging_version"
        implementation "ch.qos.logback:logback-classic:$logback_version"

        testImplementation "io.kotest:kotest-runner-junit5:$kotest_version"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    compileKotlin {
        kotlinOptions {
            useIR = true
            jvmTarget = '1.8'
            freeCompilerArgs += ['-Xbackend-threads=8']
        }
    }

    compileTestKotlin {
        kotlinOptions {
            useIR = true
            jvmTarget = '1.8'
            freeCompilerArgs += ['-Xbackend-threads=8']
        }
    }

    test {
        useJUnitPlatform()

        testLogging {
            events "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
            showStandardStreams = true
        }
    }

    kotlinter {
        ignoreFailures = false
        reporters = ['checkstyle', 'plain']
        experimentalRules = false
        disabledRules = ["no-wildcard-imports", "indent", "final-newline", "comment-spacing", "max-line-length", "no-multi-spaces", "wrapping"]
    }
}